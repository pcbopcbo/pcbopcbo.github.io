<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h1 id="nav_point_9">写作体例说明</h1>

  <p class="zw">在本书中，我会通过图例进行演示，而不是描述它们，因为用书面语不太容易做到这一点。为了显示在交互式编辑会话中所采取的步骤，我采用了一种简单的标记方法，把按键操作及 Vim 缓冲区的内容排在一起进行说明。</p>

  <p class="zw">如果你急于动手操作的话，现在可以直接跳过这一部分。这一部分主要描述本书沿用的体例，你会发现其中很多都不需要解释。或许在某个地方你会偶然发现一个符号，想搞清楚它究竟代表什么意思。当这种情况发生时，你可以回到这一部分来寻求答案。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_10">了解Vim的内置文档</h3>

  <p class="zw">了解Vim文档的最好方式是花点时间阅读。我在书中给出了Vim文档入口的“超链接”，以方便读者找到相关文档。例如，这里有一个通往Vim向导的“超链接”：<code>:h vimtutor</code> <img alt="" src="../Images/image00095.jpeg" style="width: 3%" width="3%"/>。</p>

  <p class="zw">这个图标具有两个作用。第一，它起到指示牌的作用，把目光吸引到这些有用的参考信息上；第二，如果你在联网的电子设备上阅读本书的话，那么你可以单击这些图标，它会把你带到 Vim 在线文档的相应入口。从这个意义上讲，它的确是超链接。</p>

  <p class="zw">但是，如果你正在阅读纸版书，那该怎么做？别担心，如果在你手边有可访问的 Vim程序，简单地输入图标前的命令即可。</p>

  <p class="zw">例如，你可以输入 <code>:h vimtutor</code>（<code>:h</code>是 <code>:help</code>命令的简写）。你可以把它想成 vimtutor文档的唯一地址，即某种形式的URL。从这个意义上讲，此 help 引用也是一种指向 Vim 内置文档的超链接。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_11">在书页中模拟Vim的标记</h3>

  <p class="zw">Vim 区分模式的界面把它同其他文本编辑器区别开来。以音乐作个比喻，让我们拿Qwerty 键盘与钢琴键盘进行比较。一个钢琴家可以每次只弹一个琴键来演奏主旋律，他也可以一次弹多个键来演奏和弦。对于多数文本编辑器，要触发一个键盘快捷键，需要先按住一个或多个修饰键，如控制键或命令键，然后再按另外一个键，在Qwerty键盘上的这种操作方式，等同于在钢琴键盘上演奏和弦。</p>

  <p class="zw">某些Vim命令也由演奏和弦的方式触发。不过普通模式命令则被设计成输入一串按键。在Qwerty键盘上的这种操作方式，则等同于在钢琴键盘上演奏主旋律。</p>

  <p class="zw"><code>Ctrl-s</code> 是用来表示组合键命令的惯用约定，意为“同时按控制键及 <code>s</code> 键”，但这种约定方式并不适合用来描述Vim区分模式的命令集。在本节，我们将结识贯穿于全书的标记，在讲解Vim的用法时会用到它们。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_12">演奏主旋律</h3>

  <p class="zw">在普通模式中，我们按次序输入一个或多个键组成一条命令。这些命令看起来像下面这样：</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">标记</p>
        </th>

        <th>
          <p class="表头单元格">含义</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>x</strong></p>
        </td>

        <td>
          <p class="表格单元格">按一次 <strong>x</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>dw</strong></p>
        </td>

        <td>
          <p class="表格单元格">依次按 <strong>d</strong>、<strong>w</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>dap</strong></p>
        </td>

        <td>
          <p class="表格单元格">依次按 <strong>d</strong>、<strong>a</strong>、<strong>p</strong></p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">这些序列大多数包含两个或3个按键，但有的命令会更长。解读 Vim 普通模式命令序列的含义可能颇具挑战性，不过经过练习后你会做得更好。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_13">演奏和弦</h3>

  <p class="zw">当你看到诸如 <code>&lt;C-p&gt;</code> 这样的键时，它的意思不是“先按 <code>&lt;</code>，然后按 <code>C</code>，再按 <code>-</code>，等等”。<code>&lt;C-p&gt;</code> 标记等同于<code>Ctrl-p</code>，意为“同时按 <code>&lt;Ctrl&gt;</code> 及 <code>p</code>”。</p>

  <p class="zw">我不会无缘无故地选择这种标记方式的。首先，在Vim 的文档中使用了这种标记（<code>:h key-notation</code> <img alt="" src="../Images/image00095.jpeg" style="width: 3%" width="3%"/>），我们也用它定义自定义按键映射项。另外，某些 Vim 命令由组合键及其他键以一定的次序组合在一起，这种标记也可以很好地表达这些命令。请看下面这些例子。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">标记</p>
        </th>

        <th>
          <p class="表头单元格">含义</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-n&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">同时按 <strong>&lt;Ctrl&gt;</strong> 和 <strong>n</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>g&lt;C-]&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">按 <strong>g</strong>，然后同时按 <strong>&lt;Ctrl&gt;</strong> 和 <strong>]</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-r&gt;0</strong></p>
        </td>

        <td>
          <p class="表格单元格">同时按 <strong>&lt;Ctrl&gt;</strong> 和 <strong>r</strong>，然后按 <strong>0</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-w&gt;&lt;C-=&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">同时按 <strong>&lt;Ctrl&gt;</strong> 和 <strong>w</strong>，然后同时按 <strong>&lt;Ctrl&gt;</strong> 和 <strong>=</strong></p>
        </td>
      </tr>
    </tbody>
  </table>

  <h3 class="sigil_not_in_toc" id="nav_point_14">占位符</h3>

  <p class="zw">很多Vim命令需要以一定的次序按两个或多个按键。有些命令后面必须跟某种特定类型的按键，而其他命令后面则可以跟键盘上的任意键。我使用花括号表示一条命令后可以跟有效按键集合。下面是一些例子。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">标记</p>
        </th>

        <th>
          <p class="表头单元格">含义</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>f{char}</strong></p>
        </td>

        <td>
          <p class="表格单元格">按 <strong>f</strong>，后面跟任意字符</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>`{a-z}</strong></p>
        </td>

        <td>
          <p class="表格单元格">按 <strong>`</strong>，后面跟任意小写字母</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>m{a-zA-Z}</strong></p>
        </td>

        <td>
          <p class="表格单元格">按 <strong>m</strong>，后面跟任意小写或大写字母</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>d{motion}</strong></p>
        </td>

        <td>
          <p class="表格单元格">按 <strong>d</strong>，后面跟任意动作命令</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-r&gt;{register}</strong></p>
        </td>

        <td>
          <p class="表格单元格">同时按 <strong>&lt;Ctrl&gt;</strong> 和 <strong>r</strong>，后面跟一个寄存器地址</p>
        </td>
      </tr>
    </tbody>
  </table>

  <h3 class="sigil_not_in_toc" id="nav_point_15">显示特殊按键</h3>

  <p class="zw">有些特殊按键以其名字表示，下表节选了其中的一些。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">标记</p>
        </th>

        <th>
          <p class="表头单元格">含义</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;Esc&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">按退出键</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;CR&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">按回车键，也写作 <strong>&lt;Enter&gt;</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;Ctrl&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">按控制键</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;Tab&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">按制表键</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;Shift&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">按切换键</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;S-Tab&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">同时按 <strong>&lt;Shift&gt;</strong> 和 <strong>&lt;Tab&gt;</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;Up&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">按上光标键</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;Down&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">按下光标键</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>␣</strong></p>
        </td>

        <td>
          <p class="表格单元格">按空格键</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">　</p>

  <blockquote>
    <p class="zw">注意，空格由<code>␣</code> 表示。它和 <code>f{char}</code> 命令组合在一起时记为 <code>f␣</code>。</p>
  </blockquote>

  <h3 class="sigil_not_in_toc" id="nav_point_16">区分不同模式下的输入</h3>

  <p class="zw">在操作Vim时，经常会从普通模式切换到插入模式，然后再切换回普通模式。Vim中的每个键都可能具有不同的含义，这取决于当前哪个模式生效。我用了另一种样式表示在插入模式中输入的键，这可以让人很容易地把它们与普通模式下的按键区分开来。</p>

  <p class="zw">看看这个例子 <code>cwreplacement&lt;Esc&gt;</code>。普通模式命令 <code>cw</code> 会删除从光标位置到当前词结尾处的文本，并切换到插入模式。然后我们在插入模式中输入单词“replacement”，并按 <code>&lt;Esc&gt;</code> 键再切换回普通模式。</p>

  <p class="zw">普通模式所用的样式也用于可视模式，而插入模式的样式也用来表示命令行模式及替换模式下输入的按键。你可以通过上下文清楚地知道当前处于哪个模式。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_17">在命令行中操作</h3>

  <p class="zw">在有些技巧中，我们会在 shell或 Vim中执行一条命令行命令。下面是在 shell 中执行 <code>grep</code> 命令的格式。</p>
  <pre class="代码无行号"><code>➾<strong> </strong>$ grep -n Waldo *</code></pre>

  <p class="zw">下面是执行 Vim 内置的 <code>:grep</code> 命令的格式。</p>
  <pre class="代码无行号"><code>➾ :grep Waldo *</code></pre>

  <p class="zw">在全书中，<code>$</code>符号表示在外部 shell 中执行一条命令行命令，<code>:</code> 提示符则表示这条命令在内部的命令行模式中执行。有时我们也会看到其他的提示符，包括：</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">提示符</p>
        </th>

        <th>
          <p class="表头单元格">含义</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">$</p>
        </td>

        <td>
          <p class="表格单元格">在外部 shell 中执行命令行命令</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">:</p>
        </td>

        <td>
          <p class="表格单元格">用命令行模式执行一条 Ex 命令</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">/</p>
        </td>

        <td>
          <p class="表格单元格">用命令行模式执行正向查找</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">?</p>
        </td>

        <td>
          <p class="表格单元格">用命令行模式执行反向查找</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">=</p>
        </td>

        <td>
          <p class="表格单元格">用命令行模式对一个 Vim 脚本表达式求值</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">无论你何时在文中见到一条 Ex 命令，比如 <code>:write</code>，都可以假设我们按了 <code>&lt;CR&gt;</code> 键来执行该命令，否则该命令什么也不会做，因此可以认为 <code>&lt;CR&gt;</code> 在 Ex 命令中是隐含的。</p>

  <p class="zw">与之相反，Vim 的查找命令允许在按 <code>&lt;CR&gt;</code> 前预览第一个匹配项（参见技巧82）。当你在文中见到一条查找命令时，比如 /pattern<code>&lt;CR&gt;</code>，你会看到 <code>&lt;CR&gt;</code> 键被显式地标出来了；如果 <code>&lt;CR&gt;</code> 被省略了，那是有意为之，也就是说你现在还不要按回车。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_18">显示缓冲区内光标的位置</h3>

  <p class="zw">在显示缓冲区内容时，如果能指示当前光标位于何处，那会很有用。在下面的例子里，你可以看到光标位于单词“One”的第一个字母上。</p>
  <pre class="代码无行号"><code><b>O</b>ne two three</code></pre>

  <p class="zw">当我们执行一项包含若干步的修改时，缓冲区的内容会经历一些中间状态。为了讲解这一过程，我使用了一个表格，在其左栏中显示所执行的命令，在右栏中显示缓冲区的内容。下面是个简单的例子。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格"><strong>O</strong>ne two three</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>dw</strong></p>
        </td>

        <td>
          <p class="表格单元格"><strong>t</strong>wo three</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">在第2行，我们运行<code>dw</code>命令删除了光标下的单词。通过查看位于同一行的缓冲区内容，我们可以立刻看到这条命令执行完后缓冲区的状态。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_19">高亮显示查找匹配项</h3>

  <p class="zw">在讲解 Vim 的查找命令时，如果能把缓冲区内出现的每个匹配项都高亮显示出来，那会很有帮助。在下例中，查找字符串“the”会让出现该模式的4处地方被高亮显示出来：</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格"><strong>t</strong>he problem with these new recruits is that they don't keep their boots clean.</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">/the<strong>&lt;CR&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格"><strong>the</strong> problem with <strong>the</strong>se new recruits is that <strong>the</strong>y don't keep <strong>the</strong>ir boots clean.</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">你可以跳到技巧81，了解如何激活 Vim 的查找高亮功能。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_20">在可视模式中选择文本</h3>

  <p class="zw">可视模式允许在缓冲区内选择文本，然后在其上操作。在下例中，用<code>it</code> 文本对象选中 <code>&lt;a&gt;</code> 标签内的文本。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格">&lt;a <strong>h</strong>ref="http://pragprog.com/dnvim/"&gt;Practical Vim&lt;/a&gt;</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>vit</strong></p>
        </td>

        <td>
          <p class="表格单元格">&lt;a href="http://pragprog.com/dnvim/"&gt;<strong>Practical Vim</strong>&lt;/a&gt;</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">注意，高亮显示可视选区的样式与高亮显示查找匹配项的样式相同。当你看到这种样式时，根据上下文就可以知道它究竟是代表一处查找匹配项，还是一个高亮选区。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_21">下载本书中的示例</h3>

  <p class="zw">本书中的例子通常都先显示修改前的文件内容，并在示例文本中给出该文件所在的路径，如下所示：</p>

  <p class="zw"><strong>macros/incremental.txt</strong></p>
  <pre class="代码无行号"><code>partridge in a pear tree
turtle doves
French hens
calling birds
golden rings</code></pre>

  <p class="zw">每当你看到以这种方式列出的文件路径时，都表示该例可被下载。我建议你在 Vim 中打开此文件，然后亲自试试这个例子。这是学习Vim的最好方式。</p>

  <p class="zw">要照着书中的例子操作，你可以从Pragmatic Bookshelf的网站上下载本书所有的示例和源代码<a id="acf1" href="part0008.xhtml#anchorf1"><sup>[1]</sup></a>。如果你在联网电子设备上阅读本书，也可以单击文件名来逐一获取每个文件。你可以用上面的例子试验一下。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_22">使用Vim的出厂配置</h3>

  <p class="zw">Vim 是高度可配置的，如果你不喜欢其默认的行为，可以改变它们。这本是好事，但是，如果你用自定义的 Vim 跟着做本书中的例子，可能会感到迷惑，你也许会发现有些东西并不像书中描述的那样工作。如果你怀疑是自定义配置造成了干扰，那么你可以做一个快速的测试。试着先退出 Vim，然后再用下列选项启动它。</p>
  <pre class="代码无行号"><code>➾<strong> </strong>$ vim -u NONE -N</code></pre>

  <p class="zw"><code>-u NONE</code> 标志让 Vim 在启动时不加载你的<code>vimrc</code>，这样，你的定制项就不会生效，插件也会被禁用。当用不加载 <code>vimrc</code> 文件的方式启动时，Vim会切换到 <code>vi</code> 兼容模式，这将导致很多有用的功能被禁用，<code>-N</code> 标志则会使能 <code>‘nocompatible’</code> 选项，防止进入 <code>vi</code> 兼容模式。</p>

  <p class="zw">对于本书中的大多数例子来说，用 <code>vim -u NONE –N</code>启动 Vim应该可以确保你获得与书中的描述相符的体验，不过也有几处例外。有些Vim的内置功能是由 Vim 脚本实现的，也就是说，只有在激活插件时，它们才会工作。下面的文件中包含了激活 Vim 内置插件的最小配置。</p>

  <p class="zw"><strong>essential.vim</strong></p>
  <pre class="代码无行号"><code><strong>set</strong> nocompatible
<strong>filetype</strong> plugin <strong>on</strong></code></pre>

  <p class="zw">在启动 Vim 时，可以执行如下命令，用该文件取代你的 <code>vimrc</code>。</p>
  <pre class="代码无行号"><code>➾<strong> </strong>$ vim -u code/essential.vim</code></pre>

  <p class="zw">在执行时，需要相应地调整 <code>code/essential.vim</code> 文件所在的路径。激活Vim内置的插件功能后，可以使用诸如 <code>netrw</code>（参见技巧44）、omni-completion（参见技巧119），以及很多其他的功能。我在本书中所说的Vim的出厂配置，指的就是激活了内置的插件功能，并且禁用了 <code>vi</code> 兼容模式时的配置。</p>

  <p class="zw">需要留意技巧开头的名为“准备工作”的小节，要想跟着技巧中的步骤做，需要对Vim进行相应的配置。如果你由Vim的出厂配置开始，然后再动态应用这些定制项，就应该能重现技巧中的结果，不会遇到任何问题。</p>

  <p class="zw">如果你仍遇到问题，请看后面的“关于Vim的版本”部分。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_23">Vim 脚本所扮演的角色</h3>

  <p class="zw">Vim脚本让我们可以给Vim添加新的功能，或是改变其已有的功能。它是一种完整的脚本语言，并且这个主题本身就可以写一整本书。不过本书并不是这样一本书。</p>

  <p class="zw">但我们不会完全避开此话题，Vim脚本一直隐身在幕后，时刻准备响应我们的召唤。在技巧16、技巧71、技巧95及技巧96中，我们将看到一些如何使用它们完成日常工作的例子。</p>

  <p class="zw">本书展示了如何使用Vim的核心功能。换句话说，它假设我们不使用任何第三方插件。不过技巧87是个例外，visual-star.vim 插件添加的功能我认为是不可或缺的，并且它只需很少的代码——不超过10行。同时它也展示了扩充 Vim 的功能是多么容易。文中给出了 visual-star.vim的实现，但没有讲解。这应该能给你一些印象，了解Vim脚本是什么样的，以及你能用它干什么。如果它激起了你的兴趣，那就更好了。</p>

  <h3 class="sigil_not_in_toc" id="nav_point_24">关于 Vim 的版本</h3>

  <p class="zw">本书中的所有例子都在最新的 Vim版本中测试过，在写本书时是版本 7.4。就是说，大多数例子在任意 7.x 版本中都能够很好地工作，并且所讨论的很多功能在 6.x 中也同样适用。</p>

  <p class="zw">有些Vim功能可以在编译期间被禁用。例如，在配置编译选项时，可以传入<code>--with-features=tiny</code>参数，这会禁用除最基本的功能外的其他所有功能（Vim的功能集还包括 <code>small</code>、<code>normal</code>、<code>big</code>和 <code>huge</code>）。可以查阅 <code>:h +feature-list</code> <img alt="" src="../Images/image00095.jpeg" style="width: 3%" width="3%"/>，浏览完整的功能列表。</p>

  <p class="zw">如果你发现自己的Vim缺少本书所讨论的某个功能，那么你也许正在使用一个最小功能集的 Vim 发行版。可以用 <code>:version</code>命令检查此功能是否可用。</p>
  <pre class="代码无行号"><code>➾ :version

《  VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Oct 14 2015 18:41:08)
    Huge version without GUI. Features included (+) or not (-):
    +arabic +autocmd +balloon_eval +browse +builtin_terms +byte_offset
    +cindent +clientserver +clipboard +cmdline_compl +cmdline_hist
    +cmdline_info +comments
     ...</code></pre>

  <p class="zw">在现代计算机上，没理由不用 Vim 的 <code>huge</code> 功能集！</p>

  <h3 class="sigil_not_in_toc" id="nav_point_25">用终端 Vim 还是图形化Vim？你自己定！</h3>

  <p class="zw">传统上，Vim在终端内运行，没有图形用户界面（GUI）。我们也可以说Vim具有TUI，即文本用户界面。如果你每天有大量时间花在命令行上，你会感觉这很自然。</p>

  <p class="zw">如果你通常使用基于图形用户界面的文本编辑器，那么GVim（或OSX上的MacVim）可以给你提供一个通往Vim世界的有用桥梁（参见 <code>:h gui</code><img alt="" src="../Images/image00095.jpeg" style="width: 3%" width="3%"/>）。GVim支持更多的字体以及更多的语法高亮颜色，也可以使用鼠标。它也遵从某些操作系统的约定，例如，在MacVim中，可以用<code>Cmd-X</code> 和<code>Cmd-V</code>与系统剪切板交互，也可以用 <code>Cmd-S</code> 保存文件，用 <code>Cmd-W</code>关闭一个窗口。如果你能接受的话，可以用这些命令，不过你应该已意识到，还有更好的方法完成这些。</p>

  <p class="zw">对本书的目的而言，运行终端Vim还是GVim关系不大。我们将着重于介绍Vim的核心命令，这些功能在两者中都能很好地运行。我们要学习的重点是如何用Vim的方式来工作。</p>
  <hr/>

  <p class="footnote"><a id="anchorf1" href="part0008.xhtml#acf1">[1]</a>　http://pragprog.com/titles/dnvim/source_code</p>

  <p class="zw"><br style="page-break-after:always"/><div style="page-break-after:always"></div></p>
</body></html>