<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h1 id="nav_point_72">第4章　可视模式</h1>

  <p class="zw">Vim的可视模式允许选中一块文本区域并在其上进行操作，从表面上看这应该很容易理解，因为大多数编辑软件都沿用此模式。然而，Vim的可视模式和其他软件的做法却截然不同，所以在本章的一开始，我们先深入了解可视模式（参见技巧20）。</p>

  <p class="zw">Vim具有3种不同的可视模式，分别用于操作字符文本、行文本和块文本。我们将会探讨在这几种模式间切换的方法，并介绍一些更改选区边界的有用技巧（参见技巧21）。</p>

  <p class="zw">也可以利用 <code>.</code> 命令来重复执行可视模式中的命令，然而只有在操作面向行的选区时，它才特别有用；而在操作面向字符的选区时，有时它无法达到我们的预期。我们将会看到，在这种情况下可能更适合用操作符命令。</p>

  <p class="zw">列块可视模式非常特别，它允许在块状文本上进行操作。你会发现此功能有很多的用处，不过只着重介绍3个小技巧，展示其部分功能。</p>

  <h2 id="nav_point_73">技巧20　深入理解可视模式</h2>

  <blockquote>
    <p class="zw">可视模式允许选中一个文本区域并在其上操作。尽管这看起来似乎很熟悉，但对于选中的文本，Vim的视角却有异于其他文本编辑器。</p>
  </blockquote>

  <p class="zw">假设，我们暂时没有在Vim中工作，而是在网页里的文本框中输入了单词“March”，但发现应该输入的是“April”。因此，先用鼠标双击此单词，把它高亮选中后，按退格键删除它，然后再输入正确的月份。</p>

  <p class="zw">可能你已经知道了，其实在本例中并没有必要按退格键。当单词“March”处于选中状态时，我们只需敲字母“A”，就会替换掉所选内容，清出地方来输入 “April”的剩余部分。尽管节省的按键次数有限，但毕竟积少成多。</p>

  <p class="zw">如果你期待Vim的可视模式也能以这种方式工作，那你就会觉得意外了。顾名思义，可视模式仅仅是另外一种模式，也就是说在此模式中，每个按键都完成一种不同的功能。</p>

  <p class="zw">你已经熟识的很多普通模式命令，它们在可视模式中也能完成相同的功能。我们仍可以把　<code>h</code>、<code>j</code>、<code>k</code> 及 <code>l</code> 当成光标键使用；也可以用 <code>f{char}</code> 跳到当前行的某个字符上，然后用 <code>;</code> 和 <code>,</code> 命令相应地正向或反向重复此跳转；甚至还可以用查找命令（以及 <code>n</code> / <code>N</code> 命令）跳转到匹配指定模式的地方。每次在可视模式中移动光标，都会改变高亮选区的边界。</p>

  <p class="zw">某些可视模式命令执行的基本功能与普通模式相同，但操作上有些细微的变化。例如，在这两种模式中， <code>c</code> 命令的功能是一样的，都是删除指定的文本并切换到插入模式。不过，要指定其操作的范围，二者的方式却不甚相同。在普通模式中，先触发修改命令，然后使用动作命令指定其作用范围。如果你还记得技巧12中讲过的内容，就会知道这个命令被称为操作符命令。然而，在可视模式中，要先选中选区，然后再触发修改命令。这种次序颠倒的方式对所有的操作符命令都适用（参见表2-1 Vim的操作符命令）。对大多数人来说，可视模式的做法感觉起来更自然。</p>

  <p class="zw">让我们回顾一下前面遇到的那个简单例子，即把单词“March”修改为“April”。这一次，假设我们不是在网页上的文本框里，而是回到了舒适的Vim中。我们先把光标移到单词“March”的某个位置，然后执行 <code>viw</code> 来高亮选择这个词。现在不能直接输入单词“April”，因为这会触发 <code>A</code> 命令并把文本“pril”添加到行尾。我们要换种做法，先用 <code>c</code> 命令修改所选内容，把这个单词删掉并进入插入模式，然后就可以输入完整的“April”了。这种做法和最初在网页中所用的方式类似，只不过用的是 <code>c</code> 键而不是退格键。</p>

  <blockquote>
    <p class="zw"><span style="font-family: &quot;times new&quot;">结识选择模式</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">在一个典型的文本编辑器环境中，当选中一段文本后，再输入任意可见字符时，这些选中的文本将会被删除。虽然Vim的可视模式未遵从此惯例，但是其选择模式（Select Mode）却按此方式工作。根据Vim的内置文档所述，选择模式“类似于Microsoft Windows的选择模式”（参见 <code>:h Select-mode</code><img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>）。在此模式下，输入的可见字符会使选中的文本被删除，同时Vim会进入插入模式，并插入这个可见字符。</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">按 <code>&lt;C-g&gt;</code> 可以在可视模式及选择模式间切换。切换后看到的唯一不同是屏幕下方的提示信息会在 “-- 可视　--”（-- VISUAL --）及“--选择--”（--SELECT--）间转换。但是，如果在选择模式中输入任意可见字符，此字符会替换所选内容并切换到插入模式。当然，如果是在可视模式中，仍可以像往常一样用 <code>c</code> 键来修改所选内容。</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">如果你乐于接受 Vim 区分模式的特性，那么你应该很少会用到选择模式。这一模式的存在，只是为了迎合那些想让Vim更像其他文本编辑器的用户。我只知道有一处地方会用到选择模式。有一个模拟 TextMate 的 snippet 功能的插件，它会用选择模式来高亮当前的占位符。</span></p>
  </blockquote>

  <h2 id="nav_point_74">技巧21　选择高亮选区</h2>

  <blockquote>
    <p class="zw">可视模式的3个子模式用于处理不同类型的文本。我们将在本节看到如何激活每种子模式，以及如何在它们之间切换。</p>
  </blockquote>

  <p class="zw">Vim有3种可视模式。在面向字符的可视模式中，我们能够选择任意的字符范围，不论它是单个字符，还是位于一行内，或是跨若干行的指定字符范围，都没问题。该模式适用于操作单词或短语。如果我们想对整行进行操作，可以改用面向行的可视模式。而面向列块的可视模式则允许对文档中的列块进行操作。列块可视模式非常特别，所以会在技巧24、技巧25和技巧26中花大量篇幅对其进行介绍。</p>

  <h3 id="nav_point_75">激活可视模式</h3>

  <p class="zw"><code>v</code> 键是通往可视模式的大门。在普通模式下，按 <code>v</code> 可激活面向字符的可视模式，按 <code>V</code>（v和Shift键一起按）可激活面向行的可视模式，而按 <code>&lt;C-v&gt;</code>（v和Ctrl键一起按）则可激活面向列块的可视模式，请参见下表中的汇总。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">命令</p>
        </th>

        <th>
          <p class="表头单元格">用途</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>v</strong></p>
        </td>

        <td>
          <p class="表格单元格">激活面向字符的可视模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>V</strong></p>
        </td>

        <td>
          <p class="表格单元格">激活面向行的可视模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-v&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">激活面向列块的可视模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>gv</strong></p>
        </td>

        <td>
          <p class="表格单元格">重选上次的高亮选区</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw"><code>gv</code> 命令是个有用的快捷键，它用来重选上一次由可视模式选择的文本范围。不管上个选区是面向字符的、面向行的，还是面向列块的，<code>gv</code> 命令都能够正确地工作。不过如果上次的选区被删除了，它也许会工作得不太正常。</p>

  <h3 id="nav_point_76">在可视模式间切换</h3>

  <p class="zw">可以在不同风格的可视模式间切换，方式与在普通模式下激活可视模式的方式相同。如果当前处于面向字符的可视模式，可以按 <code>V</code> 来切换到面向行的可视模式，或是用 <code>&lt;C-v&gt;</code> 来切换到面向列块的可视模式。然而，如果在面向字符的可视模式中再次按 <code>v</code>，就会回到普通模式。所以，可以把 <code>v</code> 键当成在普通模式及面向字符的可视模式间转换的开关，<code>V</code> 及 <code>&lt;C-v&gt;</code> 键也一样可以在普通模式及其对应的可视模式间切换。当然了，你总是可以按 <code>&lt;Esc&gt;</code> 或 <code>&lt;C-[&gt;</code> 回到普通模式（就像退出插入模式那样）。下表总结了在可视模式间切换的命令。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">用途</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;Esc&gt;</strong> / <strong>&lt;C-[&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">回到普通模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>v</strong> / <strong>V</strong> / <strong>&lt;C-v&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">切换到普通模式（在对应的面向字符可视模式、面向行的可视模式和面向列块的可视模式中使用时）</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>V</strong></p>
        </td>

        <td>
          <p class="表格单元格">切换到面向字符的可视模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>V</strong></p>
        </td>

        <td>
          <p class="表格单元格">切换到面向行的可视模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-v&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">切换到面向列块的可视模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>O</strong></p>
        </td>

        <td>
          <p class="表格单元格">切换高亮选区的活动端</p>
        </td>
      </tr>
    </tbody>
  </table>

  <h3 id="nav_point_77">切换选区的活动端</h3>

  <p class="zw">高亮选区的范围由其两个端点界定。其中一端固定，另一端可以随光标自由移动，可以用 <code>o</code> 键来切换其活动的端点。在定义选区时，如果定义到一半，才发现选区开始的位置不对，此时用这个键会很方便，不用退出可视模式再从头开始，只需按一下 <code>o</code>，然后重新调整选区的边界即可。下面的操作对此功能进行了演示。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格">Select from here to <strong>h</strong>ere.</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>vbb</strong></p>
        </td>

        <td>
          <p class="表格单元格">Select from <strong>here to h</strong>ere.</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>o</strong></p>
        </td>

        <td>
          <p class="表格单元格">Select from <strong>here to h</strong>ere.</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>e</strong></p>
        </td>

        <td>
          <p class="表格单元格">Select from <strong>here to here</strong>.</p>
        </td>
      </tr>
    </tbody>
  </table>

  <h2 id="nav_point_78">技巧22　重复执行面向行的可视命令</h2>

  <blockquote>
    <p class="zw">当使用 <code>.</code> 命令重复对高亮选区所做的修改时，此修改会重复作用于相同范围的文本。本节将修改一个面向行的高亮选区，然后使用 <code>.</code> 命令重复此修改。</p>
  </blockquote>

  <p class="zw">在可视模式中执行完一条命令后，会返回到普通模式，并且在可视模式中选中的文本范围也不再高亮显示了。那么，如果想对相同范围的文本执行另外一条可视模式命令，该怎么办？</p>

  <p class="zw">假设如下Python代码的缩进有些问题。</p>

  <p class="zw"><strong>visual_mode/fibonacci-malformed.py</strong></p>
  <pre class="代码无行号"><code><strong>def</strong> fib(n):
　　　　a, b = 0, 1
　　　　<strong>while</strong> a &lt; n:
<strong>print</strong> a,
a, b = b, a+b
fib(42) </code></pre>

  <p class="zw">这段代码的每级缩进使用4个空格，首先对Vim进行配置，使之符合此缩进风格。</p>

  <h3 id="nav_point_79">准备工作</h3>

  <p class="zw">要想让 <code>&lt;</code> 和 <code>&gt;</code> 命令正常工作，需要把 <code>‘shiftwidth’</code> 及 <code>‘softtabstop’</code> 的值设为4，并启用 <code>‘expandtab’</code> 选项。如果想了解这些配置是如何协同工作的，请查阅Vimcasts.org<a id="ac41" href="part0013.xhtml#anchor41"><sup>[1]</sup></a>上的“Tabs and Spaces”主题。下面一行命令会完成上述设置。</p>

  <p class="zw">➾ :set shiftwidth=4 softtabstop=4 expandtab</p>

  <h3 id="nav_point_80">先缩进一次，然后重复</h3>

  <p class="zw">在这段缩进错误的Python代码中，while关键字下面的两行应该多缩进两级。可以高亮选择这两行，然后用 <code>&gt;</code> 命令对它进行缩进，以修正其缩进错误。但此操作只增加一级缩进就返回普通模式了。</p>

  <p class="zw">要解决此问题，一个办法是使用 <code>gv</code> 命令重选相同的文本，然后再次调用缩进命令。然而，如果你已经对Vim解决问题的方式有所领悟的话，脑海里应该会响起警钟。</p>

  <p class="zw">当需要执行重复操作时，<code>.</code> 命令是最佳的解决方案。与其手动重选相同范围的文本并执行相同的命令，倒不如直接在普通模式里按 <code>.</code> 键。下面是具体的操作。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格">def fib(n):<br/>
          　　　a, b = 0, 1<br/>
          　　　while a &lt; n:<br/>
          <strong>p</strong>rint a,<br/>
          a, b = b, a+b<br/>
          fib(42)</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>Vj</strong></p>
        </td>

        <td>
          <p class="表格单元格">def fib(n):<br/>
          　　　a, b = 0, 1<br/>
          　　　while a &lt; n:<br/>
          <strong>print a,<br/>
          a , b = b, a+b<br/></strong> fib(42)</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&gt;.</strong></p>
        </td>

        <td>
          <p class="表格单元格">def fib(n):<br/>
          　　　a, b = 0, 1<br/>
          　　　while a &lt; n:<br/>
          　　　　　　<strong>p</strong>rint a,<br/>
          　　　　　　a, b = b, a+b<br/>
          fib(42)</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">如果你善于计算的话，也许更乐意在可视模式中执行 <code>2&gt;</code> 以便一步到位。不过我更喜欢用 <code>.</code> 命令，因为它可以给我即时的视觉反馈。如果需要再次缩进的话，只需再按一次 <code>.</code> 键即可；或者如果按的次数太多，导致缩进过深，按 <code>u</code> 键就可以撤销多余的缩进。在技巧11中，已经用大量篇幅讨论过次数风格与重复风格之间的差异了。</p>

  <p class="zw">在使用 <code>.</code> 命令重复一条可视模式命令时，它操作的文本数量和上次被高亮选中的文本数量相同。对于面向行的高亮选区来说，这种做法往往符合我们的需要。但对于面向字符的高亮选区来说，这却会产生令人意外的结果。接下来将通过一个例子来说明这一点。</p>

  <h2 id="nav_point_81">技巧23　只要可能，最好用操作符命令，而不是可视命令</h2>

  <blockquote>
    <p class="zw">可视模式可能比Vim的普通模式操作起来更自然一些，但是它有一个缺点：在这个模式下，<code>.</code> 命令有时会有一些异常的表现。可以用普通模式下的操作符命令来规避此缺点。</p>
  </blockquote>

  <p class="zw">假设想把下面列表中的链接文字转换为大写格式。</p>

  <p class="zw"><strong>visual_mode/list-of-links.html</strong></p>
  <pre class="代码无行号"><code>&lt;<strong>a</strong> href="#"&gt;one&lt;/<strong>a</strong>&gt;
&lt;<strong>a</strong> href="#"&gt;two&lt;/<strong>a</strong>&gt;
&lt;<strong>a</strong> href="#"&gt;three&lt;/<strong>a</strong>&gt;</code></pre>

  <p class="zw">可以用 <code>vit</code> 来选择标签里的内容。<code>vit</code> 可被解读为高亮选中标签内部的内容（visually select inside the tag），其中，<code>it</code> 命令是一种被称为文本对象（text object）的特殊动作命令。我们将在技巧52中对其进行详细讲解。</p>

  <h3 id="nav_point_82">使用可视模式下的命令</h3>

  <p class="zw">在可视模式中，可以选定一个选区然后对其进行操作。本例中，可以使用 <code>U</code> 命令来把所选中的字符转换为大写（参见 <code>:h v_U</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>），具体操作参见表4-1。</p>

  <p class="zw">在转换完第一行后，现在对接下来的两行进行同样的修改。用点范式试一下吧，怎么样？</p>

  <p class="表题">表4-1　用可视模式下的命令进行大写转换</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格"><strong>&lt;</strong>a href="#"&gt;one&lt;/a&gt;<br/>
          &lt;a href="#"&gt;two&lt;/a&gt;<br/>
          &lt;a href="#"&gt;three&lt;/a&gt;</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>vit</strong></p>
        </td>

        <td>
          <p class="表格单元格">&lt;a href="#"&gt;<strong>one</strong>&lt;/a&gt;<br/>
          &lt;a href="#"&gt;two&lt;/a&gt;<br/>
          &lt;a href="#"&gt;three&lt;/a&gt;</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>U</strong></p>
        </td>

        <td>
          <p class="表格单元格">&lt;a href="#"&gt;<strong>O</strong>NE&lt;/a&gt;<br/>
          &lt;a href="#"&gt;two&lt;/a&gt;<br/>
          &lt;a href="#"&gt;three&lt;/a&gt;</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">执行 <code>j.</code> 命令，把光标移到下一行并重复上次的修改。此命令在第二行工作得很好，但如果再执行一次，最终就会得到这个看起来有点古怪的结果。</p>
  <pre class="代码无行号"><code>&lt;<strong>a</strong> href="#"&gt;ONE&lt;/<strong>a</strong>&gt;
&lt;<strong>a</strong> href="#"&gt;TWO&lt;/<strong>a</strong>&gt;
&lt;<strong>a</strong> href="#"&gt;THRee&lt;/<strong>a</strong>&gt;</code></pre>

  <p class="zw">你看到发生什么了吗？当一条可视模式命令重复执行时，它会影响相同数量的文本（参见 <code>:h visual-repeat</code><img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>）。在本例中，最初的命令影响了一个由3个字母组成的单词。在第二行它依旧工作得很好，因为该行恰好也包含一个由3个字母组成的单词。但是，当我们想对一个由5个字母组成的单词重复此命令时，它只成功转换了其中的前3个字母，留下2个字母未被转换。</p>

  <h3 id="nav_point_83">使用普通模式下的操作符命令</h3>

  <p class="zw">可视模式下的 <code>U</code> 命令有一个等效的普通模式命令：<code>gU{motion}</code>（参见 <code>:h gU</code><img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>）。如果用此命令做第一处修改，就可以用点范式完成后续的修改，如表4-2所示。</p>

  <p class="表题">表4-2　用普通模式下的操作符命令进行大写转换</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格"><strong>&lt;</strong>a href="#"&gt;one&lt;/a&gt;<br/>
          &lt;a href="#"&gt;two&lt;/a&gt;<br/>
          &lt;a href="#"&gt;three&lt;/a&gt;</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>gUit</strong></p>
        </td>

        <td>
          <p class="表格单元格">&lt;a href="#"&gt;<strong>O</strong>NE&lt;/a&gt;<br/>
          &lt;a href="#"&gt;two&lt;/a&gt;<br/>
          &lt;a href="#"&gt;three&lt;/a&gt;</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>j.</strong></p>
        </td>

        <td>
          <p class="表格单元格">&lt;a href="#"&gt;ONE&lt;/a&gt;<br/>
          &lt;a href="#"&gt;<strong>T</strong>WO&lt;/a&gt;<br/>
          &lt;a href="#"&gt;three&lt;/a&gt;</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>j.</strong></p>
        </td>

        <td>
          <p class="表格单元格">&lt;a href="#"&gt;ONE&lt;/a&gt;<br/>
          &lt;a href="#"&gt;TWO&lt;/a&gt;<br/>
          &lt;a href="#"&gt;<strong>T</strong>HREE&lt;/a&gt;</p>
        </td>
      </tr>
    </tbody>
  </table>

  <h3 id="nav_point_84">结论</h3>

  <p class="zw">这两种方式都只需要4次按键操作：<code>vitU</code> 及 <code>gUit</code>，但其背后的含义却大相径庭。在可视模式采用的方式中，这4次按键可以被当作两个独立的命令。<code>vit</code> 用来选中选区，而 <code>U</code> 用来对选区进行转换。与之相反的是，<code>gUit</code> 命令可以被当成一个单独的命令，它由一个操作符（<code>gU</code>）和一个动作命令（<code>it</code>）组成。</p>

  <p class="zw">如果想使点命令能够重复某些有用的工作，那么最好要远离可视模式。作为一般的原则，在做一系列可重复的修改时，最好首选操作符命令，而不是其对应的可视模式命令。</p>

  <p class="zw">这并不是说可视模式出局了，它仍然占有一席之地。因为并非每个编辑任务都需要重复执行，对一次性的修改任务来说，可视模式完全够用，并且尽管Vim的动作命令允许进行精确的移动，但有时要修改的文本范围的结构很难用动作命令表达出来，而处理这种情形恰恰是可视模式擅长的。</p>

  <h2 id="nav_point_85">技巧24　用面向列块的可视模式编辑表格数据</h2>

  <blockquote>
    <p class="zw">在任何编辑器中，我们都能够操作以行为单位的文本，但以列为单位进行文本操作就需要更为专业的工具了。Vim面向列块的可视模式就提供了这种能力，可以用它来对纯文本表格进行转换。</p>
  </blockquote>

  <p class="zw">假设有如下一个纯文本表格。</p>

  <p class="zw"><strong>visual_mode/chapter-table.txt</strong></p>
  <pre class="代码无行号"><code>Chapter    　　　　 Page
Normal mode   　　　　15
Insert mode   　　　　31
Visual mode  　 　　　44</code></pre>

  <p class="zw">我们想用管道符画一条竖线来隔开这两列文本，使之看起来更像一个表格。但是在此之前，要先减少两列之间的间隔，使它们不要分得这么开。用面向列块的可视模式可以完成这两处修改，具体做法请参见表4-3。</p>

  <p class="表题">表4-3　在列间增加分隔竖线</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格">Chapter　　　　　<img alt="图像说明文字" src="../Images/image00101.jpeg"/> 　　　　 Page<br/>
          Normal mode　　　　　　　　　15<br/>
          Insert mode　　　　　　　　　31<br/>
          Visual mode　　　　　　　　　44</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-v&gt;3j</strong></p>
        </td>

        <td>
          <p class="表格单元格">Chapter　　　　　<img alt="图像说明文字" src="../Images/image00101.jpeg"/> 　　　　 Page<br/>
          Normal mode　　 <img alt="图像说明文字" src="../Images/image00101.jpeg"/>　　　　　　15<br/>
          Insert mode　　 <img alt="图像说明文字" src="../Images/image00101.jpeg"/>　　　　　　31<br/>
          Visual mode　　 <img alt="图像说明文字" src="../Images/image00101.jpeg"/>　　　　　　44</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>x...</strong></p>
        </td>

        <td>
          <p class="表格单元格">Chapter　　　　　<img alt="图像说明文字" src="../Images/image00101.jpeg"/> 　　 Page<br/>
          Normal mode　　　　　　　15<br/>
          Insert mode　　　　　　　31<br/>
          Visual mode　　　　　　　44</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>gv</strong></p>
        </td>

        <td>
          <p class="表格单元格">Chapter　　　　　<img alt="图像说明文字" src="../Images/image00101.jpeg"/> 　　 Page<br/>
          Normal mode　　 <img alt="图像说明文字" src="../Images/image00101.jpeg"/> 　　　　15<br/>
          Insert mode　　 <img alt="图像说明文字" src="../Images/image00101.jpeg"/> 　　　　31<br/>
          Visual mode　　 <img alt="图像说明文字" src="../Images/image00101.jpeg"/> 　　　　44</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">r｜</p>
        </td>

        <td>
          <p class="表格单元格">Chapter　　　　　 <strong>｜</strong>　　 Page<br/>
          Normal mode　　｜　　　　15<br/>
          Insert mode　　｜　　　　31<br/>
          Visual mode　　｜　　　　44</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>yyp</strong></p>
        </td>

        <td>
          <p class="表格单元格">Chapter　　　　 ｜　　　 Page<br/>
          <strong>C</strong>hapter　　　　 ｜　　　 Page<br/>
          Normal mode　　｜　　　　 15<br/>
          Insert mode　　｜　　　　 31<br/>
          Visual mode　　｜　　　　 44</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>Vr-</strong></p>
        </td>

        <td>
          <p class="表格单元格">Chapter　　　　 ｜　　　 Page<br/>
          <strong>-</strong>------------------------<br/>
          Normal mode　　｜　　　　 15<br/>
          Insert mode　　｜　　　　 31<br/>
          Visual mode　　｜　　　　 44</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">使用 <code>&lt;C-v&gt;</code> 进入列块可视模式，然后向下移动几行光标，选中一列文本。接下来，按 <code>x</code> 键删除此列，并用 <code>.</code> 命令重复删除相同范围的文本。此操作多重复几次直到距右边差不多有两列的距离。</p>

  <p class="zw">也可以不用 <code>.</code> 命令，而是把光标向右移动两三次，把列选区扩展为块选区，而后只需删除一次即可。不过，我更喜欢在删除时看到即时的视觉反馈，然后再多次重复此操作。</p>

  <p class="zw">现在，我们已经把所需的两列文本排列到了合适的位置，接下来就可以在这两列文本间画一条竖线了。先用 <code>gv</code> 命令重选上次的高亮选区，然后输入 <code>r|</code>， 用管道符替换此选区内的字符。</p>

  <p class="zw">到了这一步，我们或许也想画一条横线来分隔表头及其下的内容。先快速复制顶行并粘贴一份副本（<code>yyp</code>），然后用连字符替换该行内的所有字符（<code>Vr-</code>）。</p>

  <h2 id="nav_point_86">技巧25　修改列文本</h2>

  <blockquote>
    <p class="zw">用列块可视模式可以同时往若干行中插入文本。列块可视模式不仅仅对表格数据有用，在编程时我们也时常受惠于此功能。</p>
  </blockquote>

  <p class="zw">例如，对于以下CSS片段。</p>

  <p class="zw"><strong>visual_mode/sprite.css</strong></p>
  <pre class="代码无行号"><code><strong>li</strong>.one　　<strong>a</strong>{ background-image: <em>url</em>('/<em>images</em>/<em>sprite.png</em>'); }
<strong>li</strong>.two　　<strong>a</strong>{ background-image: <em>url</em>('/<em>images</em>/<em>sprite.png</em>'); }
<strong>li</strong>.three <strong>a</strong>{ background-image: <em>url</em>('/<em>images</em>/<em>sprite.png</em>'); }</code></pre>

  <p class="zw">假设已经把文件 <code>sprite.png</code>从 <code>images/</code> 目录移到了 <code>components/</code> 目录，就需要修改每一行的内容，使其指向该文件的新位置。可以使用列块可视模式完成此工作，如表4-4所示。</p>

  <p class="表题">表4-4　向多行插入文本</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格">li.one　　a{ background-image: url('/<strong>i</strong>mages/sprite.png'); }<br/>
          li.two　　a{ background-image: url('/images/sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Normal mode</em></p>
        </td>

        <td>
          <p class="表格单元格">li.three　a{ background-image: url('/images/sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-v&gt;jje</strong></p>
        </td>

        <td>
          <p class="表格单元格">li.one　　a{ background-image: url('/<strong>images</strong>/sprite.png'); }<br/>
          li.two　　a{ background-image: url('/<strong>images</strong>/sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Visual mode</em></p>
        </td>

        <td>
          <p class="表格单元格">li.three　a{ background-image: url('/<strong>images</strong>/sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>c</strong></p>
        </td>

        <td>
          <p class="表格单元格">li.one　　a{ background-image: url('/<strong>/</strong>sprite.png'); }<br/>
          li.two　　a{ background-image: url('//sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Insert mode</em></p>
        </td>

        <td>
          <p class="表格单元格">li.three　a{ background-image: url('//sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">components</p>
        </td>

        <td>
          <p class="表格单元格">li.one　　a{ background-image: url('/components<strong>/</strong>sprite.png'); }<br/>
          li.two　　a{ background-image: url('//sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Insert mode</em></p>
        </td>

        <td>
          <p class="表格单元格">li.three　　　a{ background-image: url('//sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">&lt;Esc&gt;</p>
        </td>

        <td>
          <p class="表格单元格">li.one　　a{ background-image: url('/component<strong>s</strong>/sprite.png'); }<br/>
          li.two　　a{ background-image: url('/components/sprite.png'); }</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Normal mode</em></p>
        </td>

        <td>
          <p class="表格单元格">li.three　a{ background-image: url('/components/sprite.png'); }</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">整个过程看起来非常熟悉。先指定想要操作的选区，本例中的高亮选区恰好为方形。按 <code>c</code> 键时，所有被选中的文本都消失了，同时进入插入模式。</p>

  <p class="zw">在插入模式中输入单词“components”时，此单词只出现在顶行，下面的两行没什么变化。只有在按 <code>&lt;Esc&gt;</code> 返回到普通模式后，才看到刚才输入的文本出现在下面这两行里。</p>

  <p class="zw">在Vim 列块可视模式中，修改命令的表现或许有点怪，它看上去有点不一致。删除操作会同时影响所有被选中的行，但插入操作只影响顶行（至少在处于插入模式的期间）。其他文本编辑器也提供了类似的功能，但是它们会同时更新所有被选中的行，如果你已经习惯了这样的表现（就像我以前一样），那么你会发现Vim的实现不太完美。</p>

  <p class="zw">不过在实践中，最终的结果没什么区别。因为处于插入模式的时间很短，所以没必要太过惊讶。</p>

  <h2 id="nav_point_87">技巧26　在长短不一的高亮块后添加文本</h2>

  <blockquote>
    <p class="zw">列块可视模式在操作由行列组成的方形代码块时表现得很好，然而，它并不仅限于操作方形的文本区域。</p>
  </blockquote>

  <p class="zw">我们已经见过以下的JavaScript代码片段。</p>

  <p class="zw"><strong>the_vim_way/2_foo_bar.js</strong></p>
  <pre class="代码无行号"><code><strong>var</strong> foo = 1
<strong>var</strong> bar = '<em>a</em>'
<strong>var</strong> foobar = foo + bar</code></pre>

  <p class="zw">这段代码有连续3行，每行的长度各不相同，而我们想在每行结尾添加一个分号。在技巧2中，使用 <code>.</code> 命令解决了此问题，不过，用列块可视模式也可以完成该任务，具体操作参见表4-5。</p>

  <p class="zw">在进入列块可视模式后，按 <code>$</code> 键把选区扩大到每行的行尾。乍一看，人们也许会觉得这很难，因为每一行的长度都是不同的。然而在这个场景中，Vim知道我们是想把选区扩大到选中的这些行的结尾，它会让我们打破方形的限制，创建出一个右边界长短不一的文本选区。</p>

  <p class="zw">确定好选区后，用 <code>A</code> 命令就可以在每行的结尾添加内容（参见<strong>Vim对“i”及“a”键的约定</strong>）。此命令让我们进入插入模式，且使光标停留在顶行。处于插入模式期间，任何输入的内容只出现在顶行，然而一旦返回到普通模式，这些修改就会被扩散到其余选中的行上。</p>

  <p class="表题">表4-5　在列块可视模式中为多行添加分号</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格">var foo = <strong>1</strong><br/>
          var bar = 'a'</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Normal mode</em></p>
        </td>

        <td>
          <p class="表格单元格">var foobar = foo + bar</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-v&gt;jj$</strong></p>
        </td>

        <td>
          <p class="表格单元格">var foo = <strong>1</strong><br/>
          var bar = <strong>'a'</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Visual-Block</em></p>
        </td>

        <td>
          <p class="表格单元格">var foobar <strong>= foo + bar</strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>A</strong>;</p>
        </td>

        <td>
          <p class="表格单元格">var foo = 1;<br/>
          var bar = 'a'</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Insert mode</em></p>
        </td>

        <td>
          <p class="表格单元格">var foobar = foo + bar</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">&lt;Esc&gt;</p>
        </td>

        <td>
          <p class="表格单元格">var foo = <strong>1</strong>;<br/>
          var bar = 'a';</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><em>Normal mode</em></p>
        </td>

        <td>
          <p class="表格单元格">var foobar = foo + bar;</p>
        </td>
      </tr>
    </tbody>
  </table>

  <blockquote>
    <p class="zw"><span style="font-family: &quot;times new&quot;">Vim 对“i”及“a”键的约定</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">Vim对于从普通模式切换到插入模式的命令有几个约定，<code>i</code> 命令和 <code>a</code> 命令都完成此切换，并分别把光标置于当前字符之前或之后， <code>I</code> 命令和 <code>A</code> 命令的表现类似，只是它们分别把光标置于当前行的开头和结尾。</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">Vim 对于从列块可视模式切换到插入模式的命令也遵从类似的约定。<code>I</code> 命令和 <code>A</code> 命令都完成此切换，并分别把光标置于选区的开头和结尾。那 <code>i</code> 和 <code>a</code> 命令呢，它们在可视模式里干什么？</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">在可视模式及操作符待决模式中，i 和 a 键沿用一个不同的约定。它们会被当作一个文本对象的组成部分，我们将在技巧52中深入探讨文本对象。如果你在列块可视模式里选中了一块区域，并且很奇怪为什么按 i 键没进入插入模式，那么换用 I 键试一下。</span></p>
  </blockquote>
  <hr/>

  <p class="footnote"><a id="anchor41" href="part0013.xhtml#ac41">[1]</a> 　<a href="http://vimcasts.org/e/2">http://vimcasts.org/e/2</a></p>

  <p class="zw"><br style="page-break-after:always"/><div style="page-break-after:always"></div></p>
</body></html>