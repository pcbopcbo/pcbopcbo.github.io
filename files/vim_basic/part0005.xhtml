<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h1 id="nav_point_3">第一版序</h1>

  <p class="zw">传统观点认为，Vim的学习曲线很陡，但我相信绝大多数Vim用户对此不以为然。在学习Vim的初期，人们的确需要经历一段驼峰似的阻力，然而一旦完成了vimtutor的训练，并了解如何为vimrc配置一些基本选项后，就会达到一个新的高度，能用Vim完成实际工作了—尽管步履蹒跚，但终有回报。</p>

  <p class="zw">接下来该做什么呢？来自互联网的答案是所谓的“技巧”—一种解决特定问题的灵丹妙药。当你觉得解决某个问题的方法不是最佳时，没准儿就要去搜索专门解决它的技巧了，或者你可能会主动看一些更受追捧的技巧。根据我的学习经验，这种策略的确奏效，不过这样学得很慢。“用 * 查找光标下的单词”这一招固然会让你受益匪浅，但却难以帮助你像Vim高手一样思考问题。</p>

  <p class="zw">当我发现本书正是以这种“技巧”的方式组织章节时，你一定能理解我所持的怀疑态度。这区区上百条技巧怎么能让我举一反三呢？但当我翻了几页本书之后，我才意识到自己对“技巧”的理解太片面了。本书介绍的技巧与我认为的“问题 / 解决方法”方式有所不同，它旨在向人们传授如何像Vim高手一样思考问题。从某种意义上讲，这些技巧更像是寓言故事而非医师处方。书中的前几条技巧向人们介绍了应用范围很广的 . 命令，这是Vim高手们最重要的看家法宝，因为当时没人指点，我自己过了多年才意识到这一点。</p>

  <p class="zw">正是由于这个原因，我才对本书的出版感到如此兴奋。如果现在再有Vim新手问我“下一步该学什么”，我知道该告诉他们什么了。不管怎么说，本书甚至还教会了我不少东西呢。</p>

  <p style="text-align: right">Tim Pope</p>

  <p style="text-align: right">Vim 核心贡献者</p>

  <p style="text-align: right">2012 年 4 月</p>

  <p class="zw"><br style="page-break-after:always"/><div style="page-break-after:always"></div></p>
</body></html>