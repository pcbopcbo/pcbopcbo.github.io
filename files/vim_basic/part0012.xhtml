<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
  <link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>

  <title></title>
</head><body>
  <h1 id="nav_point_61">第3章　插入模式</h1>

  <p class="zw">大部分的Vim命令都在非插入模式中执行，不过有些功能在插入模式中会更好实现些，我们将在本章深入研究这些命令。尽管删除、复制以及粘贴命令都是在普通模式中执行的，不过我们将会看到一种方便快捷的方式，让我们无需离开插入模式就能粘贴寄存器中的文本。另外我们也会学习Vim提供的两种简单方式，用来插入键盘上不存在的非常用字符。</p>

  <p class="zw">替换模式是插入模式的一种特例，它会替换文档中已有的字符。我们将学习如何使用它，并了解在哪些场景下它能够大显身手。我们也会结识插入-普通模式，它是一个子模式，可以让我们执行一个普通模式命令，之后马上又回到插入模式。</p>

  <p class="zw">自动补全是插入模式中才能使用的高级功能，我们将在第19章对其进行深入的研究。</p>

  <h2 id="nav_point_62">技巧13　在插入模式中可即时更正错误</h2>

  <blockquote>
    <p class="zw">如果在插入模式下撰写文本时出了错，可以立刻对它进行更正，而无需切换模式。要迅速更正错误，除了用退格键外，还可以用插入模式中的其他一些命令。</p>
  </blockquote>

  <p class="zw">盲打并不仅仅指输入时不看键盘，还意味着输入时要凭感觉。当盲打的人输入错误时，在眼睛看到屏幕上的错误之前，他们就已经察觉到了，他们可以用手指感知到次序颠倒这类的错误。</p>

  <p class="zw">在输入错误时，可以用退格键删除错误的文本，然后再输入正确的内容。如果出错的地方靠近单词结尾，这或许是最快的修正方式。但是，如果出错的位置在单词开头呢？</p>

  <p class="zw">专业打字员会建议先删除整个单词，然后再重新输入一遍。如果你能以每分钟超过60个单词的速度输入，那么重新输入一个词只需要1秒钟的时间。即便你打不了这么快，最好也采用这种方式。我以前总是输错某些特定的词，但自从采纳这一建议后，我就更清楚地意识到哪些词会让我犯错，因此现在犯的错也少了很多。</p>

  <p class="zw">另外，也可以切换到普通模式，然后跳到这个词的开头并更正错误，再按 <code>A</code> 返回刚才的位置。不过完成这一套动作要花的时间可能不止1秒钟，并且它也无助于提高你的盲打技巧。虽然说我们可以切换模式，不过这并不意味着一定就得切换。</p>

  <p class="zw">在插入模式下，退格键的作用如你所愿，它删除光标前的字符。另外，还可以用下面这些组合键。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">用途</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-h&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">删除前一个字符（同退格键）</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-w&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">删除前一个单词</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-u&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">删至行首</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">这些命令不是插入模式独有的，甚至也不是Vim独有的，在Vim的命令行模式中，以及在 bash shell中，也可以使用它们。</p>

  <h2 id="nav_point_63">技巧14　返回普通模式</h2>

  <blockquote>
    <p class="zw">插入模式只专注于做一件事，那就是输入文字，而普通模式却是我们大部分时间所使用的模式（顾名思义），因此能快速在这两种模式间切换是很重要的。本节将介绍一些可以减少模式切换所带来的损耗的技巧。</p>
  </blockquote>

  <p class="zw">切换回普通模式的经典方式是使用 <code>&lt;Esc&gt;</code> 键，但在许多键盘上这个键的距离似乎有点远。作为替代，也可以用 <code>&lt;C-[&gt;</code> ，它的效果与 <code>&lt;Esc&gt;</code> 完全相同（参见 <code>:h i_CTRL-[</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>]。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">用途</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;Esc&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">切换到普通模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-[&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">切换到普通模式</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-o&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">切换到插入-普通模式</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">Vim新手经常会被不断地切换模式而搞得疲倦不堪，不过练习过一段时间以后，就会渐渐感觉到得心应手了。不过，Vim区分模式的特点在下面这种特定场景中却显得有点烦琐：处于插入模式时，想运行一个普通模式命令，然后马上回到原来的位置继续输入。Vim为此提供了一种巧妙的方法，以减少模式切换所带来的不畅，这就是插入-普通模式。</p>

  <h3 id="nav_point_64">结识插入-普通模式</h3>

  <p class="zw">插入-普通模式是普通模式的一个特例，它能让我们执行一次普通模式命令。在此模式中，可以执行一个普通模式命令，执行完后，马上又返回到插入模式。要从插入模式切换到插入-普通模式，可以按 <code>&lt;C-o&gt;</code>（参见 :<code>h i_CTRL-``O</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>）。</p>

  <p class="zw">在当前行正好处于窗口顶部或底部时，有时我会滚动一下屏幕，以便看到更多的上下文。用 <code>zz</code> 命令可以重绘屏幕，并把当前行显示在窗口正中，这样就能够阅读当前行之上及之下的半屏内容。我常常会键入 <code>&lt;C-o&gt;zz</code>，在插入-普通模式中触发这条命令。此操作完成后就会直接回到插入模式，因此可以不受中断地继续打字。</p>

  <h2 id="nav_point_65">技巧15　不离开插入模式，粘贴寄存器中的文本</h2>

  <blockquote>
    <p class="zw">Vim的复制和粘贴操作一般都在普通模式中执行，不过有时我们也许想不离开插入模式，就能往文档里粘贴文本。</p>
  </blockquote>

  <p class="zw">下面是一段尚未完成的文本。</p>

  <p class="zw"><strong>insert_mode/practical-vim.txt</strong></p>
  <pre class="代码无行号"><code>Practical Vim, by Drew Neil
Read Drew Neil's</code></pre>

  <blockquote>
    <p class="zw"><span style="font-family: &quot;times new&quot;">重新映射大小写转换键（Caps Lock）</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">对Vim用户而言，大小写转换键是一个威胁。如果大小写转换键处于大写模式，而你尝试用<code>k</code>或<code>j</code>去移动光标，那么你触发的将会是<code>K</code>和<code>J</code>命令。简单地讲，<code>K</code>命令用于查看处于光标之下的那个单词的手册页（参见 <code>:h K``</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>），<code>J</code>命令则用来把当前行和下一行连接在一起（参见 <code>:h J</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>）。也就是说，如果你不小心切换到了大写模式，你将会惊讶地发现，缓冲区的内容怎么这么快就乱掉了！</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">很多Vim用户都会重新映射大小写转换键，把它当成另外一个键用，如 <code>&lt;Esc&gt;</code> 或 <code>&lt;Ctrl&gt;</code>。在现代键盘上，<code>&lt;Esc&gt;</code> 键很难够得到，而大小写转换键却很方便。把大小写转换键映射成 <code>&lt;Esc&gt;</code> 键可以省很多力气，尤其是Vim对 <code>&lt;Esc&gt;</code> 键用得这么频繁。不过我更喜欢把大小写转换键映射为 <code>&lt;Ctrl&gt;</code> 键。 <code>&lt;C-[&gt;</code> 的功用和 <code>&lt;Esc&gt;</code> 键相同，如果 <code>&lt;Ctrl&gt;</code> 键触手可及，那么这一组合键输入起来也会很容易。另外，不管是在 Vim中还是在其他程序中，很多快捷键也都会用到 <code>&lt;Ctrl&gt;</code>。</span></p>

    <p class="zw"><span style="font-family: &quot;times new&quot;">要重新映射大小写转换键，最简单的方法是在操作系统级别进行映射。不过对于OS X、Linux及Windows来说，其映射方法各不相同。因此，我不会在这儿重复每种系统的映射方法，而是建议你用Google搜索一下。注意，这一定制不仅会影响Vim，还会作用于整个系统。不过，如果你照我的建议做，你将会永远忘掉大小写转换键，我保证你不会怀念它。</span></p>
  </blockquote>

  <p class="zw">我们想把本书的书名插到最后一行，以补全该行。由于书名在第一行的开头已经出现过了，所以将把它复制到一个寄存器中，然后在插入模式中把它添加到第二行结尾。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>yt,</strong></p>
        </td>

        <td>
          <p class="表格单元格"><strong>P</strong>ractical Vim, by Drew Neil<br/>
          Read Drew Neil's</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>jA</strong>␣</p>
        </td>

        <td>
          <p class="表格单元格">Practical Vim, by Drew Neil<br/>
          Read Drew Neil's <strong><img alt="图像说明文字" src="../Images/image00100.jpeg"/></strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-r&gt;0</strong></p>
        </td>

        <td>
          <p class="表格单元格">Practical Vim, by Drew Neil<br/>
          Read Drew Neil's Practical Vim<strong><img alt="图像说明文字" src="../Images/image00100.jpeg"/></strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格">.&lt;Esc&gt;</p>
        </td>

        <td>
          <p class="表格单元格">Practical Vim, by Drew Neil<br/>
          Read Drew Neil's Practical Vim<strong>.</strong></p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw"><code>yt,</code> 命令把“Practical Vim”复制到复制专用寄存器中（将在技巧50中结识 <code>t{char}</code> 动作命令），然后在插入模式中，按 <code>&lt;C-r&gt;0</code> 把刚才复制的文本粘贴到光标所在位置（将在第10章以大量的篇幅介绍寄存器以及复制操作）。</p>

  <p class="zw">这个命令的一般格式是 <code>&lt;C-r&gt;{register}</code>，其中 <code>{register}``</code> 是想要插入的寄存器的名字（参见 <code>:h i_CTRL-R</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>）。</p>

  <h3 id="nav_point_66">对面向字符的寄存器使用 &lt;C-r&gt;{register} 命令</h3>

  <p class="zw">在插入模式中，可以用　<code>&lt;C-r&gt;{register}</code> 命令很方便地粘贴几个单词。可是如果寄存器中包含了大量的文本，你也许会发现屏幕的更新有些轻微的延时。这是因为Vim在插入寄存器内的文本时，其插入方式就如同这些文本是由键盘上一个个输进来的。因此，如果 <code>‘textwidth’</code> 或者 <code>‘autoindent’</code> 选项被激活了的话，最终就可能会出现不必要的换行或额外的缩进。</p>

  <p class="zw"><code>&lt;C-r&gt;&lt;C-p&gt;{register}</code> 命令则会更智能一些，它会按原义插入寄存器内的文本，并修正任何不必要的缩进（参见 <code>:h i_CTRL-R_CTRL-P``</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>），不过这个命令有点不太好输入！因此，如果我想从一个寄存器里粘贴很多行文本的话，我更喜欢切换到普通模式，然后使用某个粘贴命令（参见技巧63）。</p>

  <h2 id="nav_point_67">技巧16　随时随地做运算</h2>

  <blockquote>
    <p class="zw">表达式寄存器允许我们做一些运算，并把运算结果直接插入文档中。本节将看到一个运用此强大功能的实例。</p>
  </blockquote>

  <p class="zw">大部分的Vim寄存器中保存的都是文本，要么是一个字符串，要么是若干行的文本。删除及复制命令允许我们把文本保存到寄存器中，粘贴命令则允许把寄存器中的内容插入文档里。</p>

  <p class="zw">不过表达式寄存器则是个另类，它可以用来执行一段Vim脚本，并返回其结果。在本节，我们将把它当成计算器来用。传给它一个简单的算术表达式，如1 + 1，它就会给出结果2。对表达式寄存器所返回的文本，我们可以像用普通寄存器中的文本那样使用它。</p>

  <p class="zw">可以用 = 符号指明使用表达式寄存器。在插入模式中，输入 <code>&lt;C-r&gt;=</code>就可以访问这一寄存器。这条命令会在屏幕的下方显示一个提示符，可以在其后输入要执行的表达式。输入表达式后敲一下 <code>&lt;CR&gt;</code>，Vim就会把执行的结果插入文档的当前位置了。</p>

  <p class="zw">假设刚输入完下列内容。</p>

  <p class="zw"><strong>insert_mode/back-of-envelope.txt</strong></p>
  <pre class="代码无行号"><code>6 chairs, each costing $35, totals $</code></pre>

  <p class="zw">我们想算一下总价，不过没必要找个信封在背面做演算，Vim可以帮我们做这件事，我们甚至连插入模式都不用退出。做法如下。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>A</strong></p>
        </td>

        <td>
          <p class="表格单元格">6 chairs, each costing $35, totals $<strong><img alt="图像说明文字" src="../Images/image00100.jpeg"/></strong></p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-r&gt;=</strong>6*35<strong>&lt;CR&gt;</strong></p>
        </td>

        <td>
          <p class="表格单元格">6 chairs, each costing $35, totals $210<strong><img alt="图像说明文字" src="../Images/image00100.jpeg"/></strong></p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">表达式寄存器远不止能做简单算术运算。我们将在技巧71中看到一些更高级的应用。</p>

  <h2 id="nav_point_68">技巧17　用字符编码插入非常用字符</h2>

  <blockquote>
    <p class="zw">Vim可以用字符编码（Character Code）插入任意字符。使用此功能可以很方便地输入键盘上找不到的符号。</p>
  </blockquote>

  <p class="zw">只要知道某个字符的编码，就可以让Vim插入该字符，我们可以用这种方式插入任意字符。要根据字符编码插入字符，只需在插入模式中输入 <code>&lt;C-v&gt;{code}</code> 即可，其中 <code>{code}</code>是要插入字符的编码。</p>

  <p class="zw">Vim接受的字符编码共包含3位数字。例如，假设想插入大写字母“A”，它的字符编码是65，因此需要输入 <code>&lt;C-v&gt;065</code>。</p>

  <p class="zw">然而，如果想插入一个编码超过3位数的字符该怎么办？例如，Unicode基本多文种平面（Unicode Basic Multilingual Plane）的地址空间最大会有65 535个字符。解决方法是用4位十六进制编码来输入这些字符，即输入 <code>&lt;C-v&gt;u{1234}</code> （注意数字前的 <code>u</code> ）。假设想插入字符编码为00bf的反转问号（“¿”），只需在插入模式中输入 <code>&lt;C-v&gt;u00bf</code> 即可。更多详细内容可参见 <code>:h i_CTRL-V_digit``</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/> 。</p>

  <p class="zw">如果你想知道文档中任意字符的编码，只需把光标移到它上面并按 <code>ga</code> 命令，然后屏幕下方会显示出一条消息，分别以十进制和十六进制的形式显示出其字符编码（参见 <code>:h ga</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/> ）。当然，如果你想知道文档中不存在的字符的编码，该命令就无能为力了。在这种情况下，你或许得去查一下unicode表。</p>

  <p class="zw">另外，如果 <code>&lt;C-v&gt;</code> 命令后面跟一个非数字键，它会插入这个按键本身代表的字符。例如，如果启用了 <code>‘expandtab’</code> 选项，那么按 <code>&lt;Tab&gt;</code> 键将会插入空格而不是制表符。然而，按 <code>&lt;C-v&gt;&lt;Tab&gt;</code> 则会一直插入制表符，不管 <code>‘expandtab’</code> 选项激活与否。</p>

  <p class="zw">表3-1对输入非常用字符的命令进行了总结。</p>

  <p class="表题">表3-1　插入非常用字符</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">用途</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-v&gt;{123}</strong></p>
        </td>

        <td>
          <p class="表格单元格">以十进制字符编码插入字符</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-v&gt;u{1234}</strong></p>
        </td>

        <td>
          <p class="表格单元格">以十六进制字符编码插入字符</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-v&gt;{nondigit}</strong></p>
        </td>

        <td>
          <p class="表格单元格">按原义插入非数字字符</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>&lt;C-k&gt;{char1}{char2}</strong></p>
        </td>

        <td>
          <p class="表格单元格">插入以二合字母<strong>{char1}{char2}</strong>表示的字符</p>
        </td>
      </tr>
    </tbody>
  </table>

  <h2 id="nav_point_69">技巧18　用二合字母插入非常用字符</h2>

  <blockquote>
    <p class="zw">虽然Vim允许我们用数字编码插入任意字符，不过这既难记忆也难输入。我们也可以用二合字母（digraph）来插入非常用字符，成对的字符更容易记忆一些。</p>
  </blockquote>

  <p class="zw">二合字母用起来很方便。在插入模式中，只需输入 <code>&lt;C-k&gt;&gt;{char1}{char2}</code> 即可。因此，如果想输入以二合字母 ?I 表示的“¿”字符，可以简单地输入 <code>&lt;C-k&gt;?I</code> 。</p>

  <p class="zw">Vim在选择组成二合字母的两个字符时，尽量使之具有描述性，这样就更容易记住它们，甚至也能猜出其含义。例如，左右书名号《和》分别以二合字母&lt;&lt;及&gt;&gt;表示，普通分数（或常用分数）½、¼和¾则分别以二合字母12、14和34来表示。Vim的缺省二合字母集依从一定的惯例， <code>:h digraphs-default</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>文档对此进行了总结。</p>

  <p class="zw">用命令 <code>:digraphs</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>可以查看可用的二合字母列表，不过该命令的输出不太好阅读。也可以用 <code>:h digraph-table</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>查看另一个更为有用的列表。</p>

  <h2 id="nav_point_70">技巧19　用替换模式替换已有文本</h2>

  <blockquote>
    <p class="zw">在替换模式中输入会替换文档中的已有文本，除此之外，该模式与插入模式完全相同。</p>
  </blockquote>

  <p class="zw">假设有如下一段文本。</p>

  <p class="zw"><strong>insert_mode/replace.txt</strong></p>
  <pre class="代码无行号"><code>Typing in Insert mode extends the line. But in Replace mode
the line length doesn't change.</code></pre>

  <p class="zw">我们想把这两个单独的句子合并成一句话，为此，需要把句号改成逗号，并将单词“But”中的“B”改为小写。下例展示了如何用替换模式完成这项工作。</p>

  <table border="1" width="90%">
    <thead>
      <tr>
        <th>
          <p class="表头单元格">按键操作</p>
        </th>

        <th>
          <p class="表头单元格">缓冲区内容</p>
        </th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <p class="表格单元格">{start}</p>
        </td>

        <td>
          <p class="表格单元格"><strong>T</strong>yping in Insert mode extends the line. But in Replace mode<br/>
          the line length doesn't change.</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>f.</strong></p>
        </td>

        <td>
          <p class="表格单元格">Typing in Insert mode extends the line<strong>.</strong> But in Replace mode<br/>
          the line length doesn't change.</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="表格单元格"><strong>R</strong>,␣b&lt;Esc&gt;</p>
        </td>

        <td>
          <p class="表格单元格">Typing in Insert mode extends the line, <strong>b</strong>ut in Replace mode<br/>
          the line length doesn't change.</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="zw">用 <code>R</code> 命令可以由普通模式进入替换模式，然后就如例中所示，输入“<code>,␣b</code>”替换原有的“<code>.``␣``B</code>”字符。完成替换后，可以按 <code>&lt;Esc&gt;</code> 键返回普通模式。如果你的键盘上有<code>&lt;Insert&gt;</code> 键，那么也可以用该键在插入模式和替换模式间切换，不过并非所有的键盘都有这个键。</p>

  <h3 id="nav_point_71">用虚拟替换模式替换制表符</h3>

  <p class="zw">某些字符会使替换模式变得复杂化。以制表符为例，在文件中它以单个字符表示，但在屏幕上它却会占据若干列的宽度，此宽度由 <code>‘tabstop’</code> 设置决定（参见 <code>:h 'tabstop'</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>）。如果把光标移到制表符上，然后进入替换模式，那么输入的下一个字符将会替换制表符。假设 <code>‘tabstop’</code> 选项设置为8（这是缺省值），那么该操作的结果就是把8个字符替换成了一个字符，这将大幅缩短当前行的长度。</p>

  <p class="zw">不过Vim还有另外一种替换模式，称为虚拟替换模式（virtual replace mode）。该模式可由 <code>gR</code> 命令触发，它会把制表符当成一组空格进行处理。假设把光标移到一个占屏幕8列宽的制表符上，然后切换到虚拟替换模式，在输入前7个字符时，每个字符都会被插入制表符之前；最后，当输入第8个字符时，该字符将会替换制表符。</p>

  <p class="zw">在虚拟替换模式中，我们是按屏幕上实际显示的宽度来替换字符的，而不是按文件中所保存的字符进行替换。这会减少意外情况的发生，因此建议在可能的情况下尽量使用虚拟替换模式。</p>

  <p class="zw">Vim也提供了单次版本的替换模式及虚拟替换模式。<code>r{char}</code> 和 <code>gr{char}</code> 命令允许覆盖一个字符，之后马上又回到普通模式（参见 <code>:h r</code> <img alt="" src="../Images/image00096.jpeg" style="width: 3%" width="3%"/>）。</p>

  <p class="zw"><br style="page-break-after:always"/><div style="page-break-after:always"></div></p>
</body></html>